// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Person {
  ciNumber                 String          @id @unique
  name                     String
  lastName                 String
  email                    String?
  phoneNumber              String?
  homeDir                  String?         @db.Text()
  homeParroquia            String
  homeMunicipio            String
  relation                 String?
  Student                  Student?
  Represent                Represent?
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  relationFatherTable      relationTable[] @relation("father")
  relationMotherTable      relationTable[] @relation("mother")
  relationThirdPersonTable relationTable[] @relation("thirdperson")

  @@map("persons")
}

model Student {
  studentRelation Person         @relation(fields: [studentCiNumber], references: [ciNumber], onDelete: Restrict, onUpdate: Cascade)
  studentCiNumber String         @unique
  bornPlace       String         @db.Text
  bornState       String
  bornMunicipio   String
  bornParroquia   String
  bornPais        String
  bornDate        DateTime
  age             Int
  sex             String         @db.Char(1)
  weight          Decimal?
  size            Decimal?
  Lateralidad     String
  instPro         String         @db.Text()
  Notas           Notas[]
  relationTable   relationTable?

  @@map("students")
}

model Represent {
  personRelation    Person          @relation(fields: [representCiNumber], references: [ciNumber], onDelete: Restrict, onUpdate: Cascade)
  representCiNumber String          @unique
  civilStatus       String
  Instrution        String
  profession        String?
  business          String?
  workPlace         String?         @db.Text()
  workPhoneNumber   String?
  workEmail         String?
  incomeMonth       Decimal?
  sourceIncome      String?
  relationTable     relationTable[]

  @@map("represent")
}

model relationTable {
  idRelation            String    @id @default(uuid())
  representRelation     Represent @relation(fields: [representCiNumbers], references: [representCiNumber], onDelete: Restrict, onUpdate: Restrict)
  representCiNumbers    String
  fichaRelation         Ficha     @relation(fields: [fichaId], references: [idFicha], onDelete: Restrict, onUpdate: Restrict)
  fichaId               String    @unique
  motherPersonRelation  Person?   @relation("mother", fields: [motherPersonCiNumbers], references: [ciNumber], onDelete: Restrict, onUpdate: Restrict)
  motherPersonCiNumbers String?
  fatherPersonRelation  Person?   @relation("father", fields: [fatherPersonCiNumbers], references: [ciNumber], onDelete: Restrict, onUpdate: Restrict)
  fatherPersonCiNumbers String?
  thirdPersonRelation   Person?   @relation("thirdperson", fields: [thirdPersonCiNumbers], references: [ciNumber], onDelete: Restrict, onUpdate: Restrict)
  thirdPersonCiNumbers  String?
  statusRelation        Status    @relation(fields: [statusId], references: [idStatus], onDelete: Restrict, onUpdate: Restrict)
  statusId              Int       @unique
  studentRelation       Student   @relation(fields: [studentId], references: [studentCiNumber], onDelete: Restrict, onUpdate: Restrict)
  studentId             String    @unique
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("relation_tables")
}

model Status {
  idStatus      Int            @id
  typeAler      String?        @db.Text()
  operation     String?        @db.Text()
  enfermedades  String         @db.Text()
  conditionEsp  String
  asisMedica    String
  bloodType     String
  medicEsp      String
  infoMedic     String
  liveWith      String
  poseeHer      String
  levelHer      String?
  ageHer        String?
  preferComp    String
  creationGroup String
  preferAct     String         @db.Text()
  recreTime     String
  transporte    String
  resOriStudent String
  relationTable relationTable?

  @@map("health_info")
}

model Ficha {
  idFicha       String         @id @default(uuid())
  level         String
  section       String         @db.Char(1)
  procePlant    String         @db.Text()
  escolarPeriod String
  InsDate       DateTime       @default(now())
  userRelation  User           @relation(fields: [personalRes], references: [id])
  personalRes   String
  relationTable relationTable?

  @@map("ins_info")
}

model AgeAcademicos {
  age          Int      @db.Year()
  periodo      String   @id
  fecha_inicio DateTime
  fecha_fin    DateTime
  Notas        Notas[]

  @@map("periodo_academico")
}

model Asignatura {
  idAsignatura    Int     @id
  nameAsignatura  String
  teacherRelation User    @relation(fields: [teacher], references: [email])
  teacher         String
  Notas           Notas[]

  @@map("asignaturas")
}

model Notas {
  id                 Int           @id
  studentRelation    Student       @relation(fields: [idStudent], references: [studentCiNumber])
  idStudent          String
  asignaturaRelation Asignatura    @relation(fields: [asignatura], references: [idAsignatura])
  asignatura         Int
  ageRelation        AgeAcademicos @relation(fields: [ageAcademicos], references: [periodo])
  ageAcademicos      String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@map("notas")
}

model Rol {
  idRol   Int    @id @default(autoincrement())
  nameRol String
  User    User[]

  @@map("roles")
}

model User {
  id         String       @id @default(uuid())
  name       String
  lastName   String
  ciNumber   String       @unique
  email      String       @unique
  role       Rol          @relation(fields: [roleId], references: [idRol])
  roleId     Int          @default(3)
  password   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Asignatura Asignatura[]
  Ficha      Ficha[]

  @@map("users")
}
