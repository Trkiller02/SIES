// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Person {
  ciNumber      String     @id @unique
  name          String
  lastName      String
  email         String?
  phoneNumber   String?
  homeDir       String?    @db.Text()
  homeParroquia String
  homeMunicipio String
  relation      String?
  Student       Student?
  Represent     Represent?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("persons")
}

model Student {
  studentRelation Person         @relation(fields: [studentCiNumber], references: [ciNumber], onDelete: Restrict, onUpdate: Cascade)
  studentCiNumber String         @unique
  bornState       String
  bornPais        String
  bornDate        DateTime
  liveWith        String
  age             Int
  sex             String         @db.Char(1)
  weight          Decimal?
  size            Decimal?
  Lateralidad     String
  instPro         String         @db.Text()
  Notas           Notas[]
  relationTable   relationTable?

  @@map("students")
}

model Represent {
  personRelation      Person          @relation(fields: [representCiNumber], references: [ciNumber], onDelete: Restrict, onUpdate: Cascade)
  representCiNumber   String          @unique
  profession          String?
  tlfnHome            String?
  workPlace           String?         @db.Text()
  workPhoneNumber     String?
  incomeMonth         Decimal?
  relationTable       relationTable[]
  relationFatherTable relationTable[] @relation("father")
  relationMotherTable relationTable[] @relation("mother")

  @@map("represent")
}

model relationTable {
  idRelation            String     @id @default(uuid())
  representRelation     Represent  @relation(fields: [representCiNumbers], references: [representCiNumber], onDelete: Restrict, onUpdate: Restrict)
  representCiNumbers    String
  fichaRelation         Ficha      @relation(fields: [fichaId], references: [idFicha], onDelete: Restrict, onUpdate: Restrict)
  fichaId               String     @unique
  motherRelation        Represent? @relation("mother", fields: [motherPersonCiNumbers], references: [representCiNumber], onDelete: Restrict, onUpdate: Restrict)
  motherPersonCiNumbers String?
  fatherRelation        Represent? @relation("father", fields: [fatherPersonCiNumbers], references: [representCiNumber], onDelete: Restrict, onUpdate: Restrict)
  fatherPersonCiNumbers String?
  statusRelation        Status     @relation(fields: [statusId], references: [idStatus], onDelete: Restrict, onUpdate: Restrict)
  statusId              String     @unique
  studentRelation       Student    @relation(fields: [studentId], references: [studentCiNumber], onDelete: Restrict, onUpdate: Restrict)
  studentId             String     @unique
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  deleteAt              DateTime?

  @@map("relation_tables")
}

model Status {
  idStatus      String         @id @default(uuid())
  typeAler      String?        @db.Text()
  trataEsp      String?        @db.Text()
  preferAct     String?        @db.Text()
  recreTime     String?
  siteAct       String?
  proLevel      String?
  plantProce    String?
  relationTable relationTable?

  @@map("health_info")
}

model Ficha {
  idFicha       String         @id @default(uuid())
  level         String         @db.Char(1)
  section       String         @db.Char(1)
  etapa         String         @db.Char(1)
  turno         String         @db.Char(1)
  procePlant    String         @db.Text()
  escolarPeriod String
  InsDate       DateTime       @default(now())
  personalRes   String
  relationTable relationTable?

  @@map("ins_info")
}

model AgeAcademicos {
  age          Int      @db.Year()
  periodo      String   @id
  fecha_inicio DateTime
  fecha_fin    DateTime

  @@map("periodo_academico")
}


model Rol {
  idRol   Int    @id @default(autoincrement())
  nameRol String
  User    User[]

  @@map("roles")
}

model User {
  id           String       @id @default(uuid())
  restoreToken String
  name         String
  lastName     String
  ciNumber     String       @unique
  email        String       @unique
  role         Rol          @relation(fields: [roleId], references: [idRol])
  roleId       Int          @default(3)
  password     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Asignatura   Asignatura[]

  @@map("users")
}
